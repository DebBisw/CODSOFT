# -*- coding: utf-8 -*-
"""SalesPrediction_Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/178LhLR0iwcRjjbEHvn834_3t3rO0g-MW

Loading **the** Dataset provided
"""

from google.colab import files
uploaded=files.upload()

import pandas as pd
df=pd.DataFrame(pd.read_csv('advertising.csv'))

df.head()

df.info()
#summary

df.describe()
#statistical Summary

df.shape

#checking for null values
df.isnull().sum()

"""**Splitting** the data into training and testing sets.

**Training** the Linear Regression model.

**Evaluating** the model using metrics like R-squared and Mean Squared Error.
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error

# Features and target variable
X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']
# Spliting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
# Create a linear regression model
model = LinearRegression()

# Fit the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

"""Here are the values of the MSE and R-squared

"""

print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared: {r2:.2f}')
print(f'Mean Absolute Error: {mae:.2f}')

"""The MSE of 2.40 suggests that, on average, the squared differences between the actual and predicted sales values are lower compared to the previous model (MSE of 5.51). This indicates that the model's predictions are closer to the actual sales values.

An *RÂ² of 0.91* is quite high, suggesting that the model fits the data well.

MAE of 1.12 Indicates that the average absolute difference between the predicted and actual sales values is 1.12. This means that, on average, the predictions are quite close to the true values, which is a good indication of the model's accuracy.
"""

# Visualizing the results
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Actual')
plt.ylabel('Predicted')
plt.title('Actual vs Predicted Sales')
plt.show()

